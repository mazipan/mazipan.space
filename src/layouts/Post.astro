---
import FullWidth from '@/layouts/FullWidth.astro';
import Breadcrumbs from '@/components/Breadcrumbs.astro';
import { BreadcrumbItemBlog, BreadcrumbItemHome } from '@/constants/breadcrumb';

import type { BaseProps } from '@/layouts/Base.astro';

export interface Props extends BaseProps {}

const props = Astro.props;
const breadcrumbs = [BreadcrumbItemHome, BreadcrumbItemBlog];
---

<FullWidth {...props}>
  <article class="relative pb-16 pt-8">
    <section class="centered-px max-w-6xl">
      <Breadcrumbs items={breadcrumbs} />
    </section>

    <figure class="centered-px max-w-6xl">
      <slot name="hero-image" />
    </figure>

    <section class="centered-px b-h2-my max-w-6xl">
      <slot name="hero-text" />
    </section>

    <section class="centered md:centered-px max-w-6xl">
      <div class="relative gap-4 lg:grid lg:grid-cols-[minmax(0,1fr),300px]">
        <section
          class="my-prose centered-px post-detail [&>h2:nth-child(1)]:mt-0 [&>h2:nth-child(3)]:mt-0"
        >
          <content-wrapper><slot name="content" /></content-wrapper>
        </section>
        {Astro.slots.has('toc') && <slot name="toc" />}
      </div>
    </section>

    <section class="centered-px max-w-6xl">
      <slot name="after-content" />
    </section>

    <section class="centered-px b-h2-mt max-w-6xl">
      <slot name="more-posts" />
    </section>
  </article>
</FullWidth>

<script>
  class ContentWrapper extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const codeGroups = document.querySelectorAll('.rehype-code-group');
      if (!codeGroups || codeGroups.length <= 0) {
        return;
      }

      codeGroups.forEach((group) => {
        const tabs = group.querySelectorAll('.rcg-tab');
        const blocks = group.querySelectorAll('.rcg-block');
        let activeTab = group.querySelector('.rcg-tab.active');
        let activeBlock = group.querySelector('.rcg-block.active');

        group.addEventListener('click', (event) => {
          // @ts-ignore
          const tab = event?.target?.closest('.rcg-tab');
          if (!tab) return;

          const index = Array.from(tabs).indexOf(tab);
          if (index === -1) return;

          if (activeTab) {
            activeTab.classList.remove('active');
            activeTab.setAttribute('aria-selected', 'false');
          }
          if (activeBlock) {
            activeBlock.classList.remove('active');
            activeBlock.setAttribute('hidden', 'true');
          }

          tab.classList.add('active');
          tab.setAttribute('aria-selected', 'true');
          blocks[index].classList.add('active');
          blocks[index].removeAttribute('hidden');

          activeTab = tab;
          activeBlock = blocks[index];
        });
      });
    }
  }

  customElements.define('content-wrapper', ContentWrapper);
</script>
